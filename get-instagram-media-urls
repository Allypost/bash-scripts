#!/usr/bin/env python3

from posixpath import realpath
import sys
import json
import requests
import requests.exceptions
import urllib.parse
import os.path
from typing import Union

SESSION_ID_FILE = os.path.join(
    os.path.expanduser('~'),
    './.config/.secrets/instagram',
)


def get_input() -> Union[str, None]:
    urls = [url for url in sys.argv[1:]]
    if not sys.stdin.isatty():
        urls.extend(sys.stdin.readlines())

    return urls[0] if len(urls) > 0 else None


def parse_url(raw_url: str) -> dict:
    url = raw_url.strip()

    if url.find('://') == -1 and not url.startswith('//'):
        parsed_url = urllib.parse.urlparse('//' + url, 'http')
    else:
        parsed_url = urllib.parse.urlparse(url)

    res = parsed_url._asdict()
    if res['query']:
        res['query'] = urllib.parse.parse_qs(res['query'])

    return res


def session_cookie() -> str:
    if not os.path.isfile(SESSION_ID_FILE):
        return ""

    with open(SESSION_ID_FILE) as f:
        return f"sessionid={f.readline()}".strip()


def get_api_response(id: str) -> requests.Response:
    query_hash = '2efa04f61586458cef44441f474eee7c'
    query_args = {
        "shortcode": id,
        "child_comment_count": 0,
        "fetch_comment_count": 0,
        "parent_comment_count": 0,
        "has_threaded_comments": True
    }

    api_url = f"https://www.instagram.com/graphql/query/?query_hash={query_hash}&variables={urllib.parse.quote(json.dumps(query_args))}"
    headers = {
        "Cookie": session_cookie(),
        "User-Agent": "Instagram post download script (personal use only I swar)"
    }

    return requests.get(api_url, headers=headers)


def main():
    url_info = parse_url(raw_url=get_input())

    # `url_info["path"]` should be of format `/p/$POST_ID/`
    post_id = url_info["path"].split("/")[-2]

    r = get_api_response(id=post_id)

    try:
        json_response = r.json()
        edges = json_response["data"]["shortcode_media"]

        if "edge_sidecar_to_children" not in edges:
            print(edges["display_url"])
            return
        else:
            edges = edges["edge_sidecar_to_children"]["edges"]

        media_urls = [
            entry["node"].get("video_url", entry["node"]["display_url"])
            for entry
            in edges
        ]

        for url in media_urls:
            print(url)
    except ValueError:
        return None


if __name__ == "__main__":
    main()
