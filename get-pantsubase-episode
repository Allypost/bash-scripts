#!/usr/bin/env python3

import os
import subprocess
import argparse
from typing import Union
import requests
import re
import urllib.parse
from bs4 import BeautifulSoup

from python.downloaders import DownloadInfo, get_download_info
from python.log.console import Console, Chalk


def get_episode_number_to_download(argv) -> int:
    if argv.episode:
        return argv.episode

    last_episode_number = os.popen(
        "ls | sort -h | grep -E '^[0-9]+' | tail -n1 | cut -d'.' -f1"
    ).read()

    return int(last_episode_number or 0) + 1


def get_download_urls(episode_url: str) -> list[str]:
    Console.log_dim("Fetching episode page...", return_line=True)
    response = requests.get(episode_url)
    if not response:
        return []
    page_html = response.text
    Console.log_dim("Parsing html...", return_line=True)
    soup = BeautifulSoup(page_html, 'html.parser')

    def tag_filter(tag):
        return tag.has_attr('id') and tag['id'] == 'select-iframe-to-display'

    def parse_value(value):
        value_parts = str(value).split('-#-')

        video_link = value_parts[0]
        host = value_parts[-1]

        if host == 'fembed':
            return f"https://fcdn.stream/v/{video_link}"
        elif host == 'gogo-stream':
            return f"https://gogo-stream.com/streaming.php?id={video_link}"
        else:
            return None

    def fix_url(url: Union[str, None]) -> Union[str, None]:
        if not url:
            return None

        if re.compile(r'^https?://').match(url):
            return url

        if str(url).startswith('//'):
            return f"https:{url}"

        Console.log(f"Unknown url format: `{url}'")

        return None

    Console.clear_line()
    urls = [
        soup.iframe['src'],
        *[
            parse_value(tag['value'])
            for tag
            in soup.find(tag_filter).find_all('option')
            if tag.has_attr('value')
        ]
    ]

    return list(filter(lambda x: x, set([
        fix_url(url)
        for url
        in urls
    ])))

def get_video_url(download_url: str) -> DownloadInfo:
    url_info = urllib.parse.urlparse(download_url)
    hostname = url_info.netloc

    Console.log_dim(f"Trying `{hostname}`", return_line=True)

    info = get_download_info(download_url)

    if info is None:
        Console.log_dim(f"Could not extract link for `{hostname}`")
        raise Exception("No handler")

    return info


def main():
    parser = argparse.ArgumentParser(
        description="Download videos from pantsubase.tv",
        usage="%(prog)s -n 'series-name-here' [options]",
    )

    parser.add_argument(
        "series",
        help="Name (from the site URL) of the series you want to download (eg. 'shingeki-no-kyojin')",
        type=str,
        nargs='?',
    )

    parser.add_argument(
        "-n, --series-name",
        help="Name (from the site URL) of the series you want to download (eg. 'shingeki-no-kyojin')",
        type=str,
        nargs='?',
        dest="series_name",
    )

    parser.add_argument(
        "-e, --episode",
        help="Explicitly set which episode to download. Otherwise, latest non-downloaded episode is selected.",
        type=int,
        nargs='?',
        required=False,
        default=None,
        dest="episode",
    )

    parser.add_argument(
        "-f, --number-format",
        help="String format on how to name files. Defaults to: %02d",
        type=str,
        required=False,
        default="%02d",
        dest="number_format",
    )

    argv = parser.parse_args()

    series_name = argv.series_name or argv.series
    episode_number = get_episode_number_to_download(argv)
    number_format = argv.number_format

    if series_name is None:
        raise Exception("No series name")

    episode_url = f'https://pantsubase.tv/watch/{series_name}-episode-{episode_number}'

    Console.log(f'Downloading {Chalk.badge(series_name, Chalk.black, Chalk.bg_yellow_bright)} episode {Chalk.badge(episode_number, Chalk.black, Chalk.bg_blue_bright)}')

    download_urls = get_download_urls(episode_url)

    if (len(download_urls) <= 0):
        Console.log_error(f"Episode {episode_number} can't be found")
        exit(1)

    processed = 0
    for download_url in download_urls:
        processed += 1
        try:
            download_info = get_video_url(download_url)

            url = download_info.url
            referer = download_info.referer or url

            hostname = urllib.parse.urlparse(download_url).netloc

            Console.log(f"{Chalk.colour(Chalk.italic)}Downloading from {hostname}{Chalk.colour('23m')}")

            download_cmd = [
                "yt-dlp",
                "--no-warnings",
                "--no-check-certificate",
                "--concurrent-fragments", "16",
                "--referer", referer,
                "--output", f"{number_format % (episode_number)}.mp4",
                url,
            ]
            download_line = re.compile(r"\[download\]\s+(\d+\.\d+%.*)")

            with subprocess.Popen(
                download_cmd,
                stdout=subprocess.PIPE,
                bufsize=1,
                text=True,
            ) as proc:
                for line in proc.stdout:
                    if not download_line.search(line):
                        continue
                    status = line.split(" ", maxsplit=1)[1].strip()
                    Console.log_dim(status, return_line=True)

                if proc.wait() != 0:
                    print(subprocess.list2cmdline(download_cmd))
                    raise Exception("Something broke")
        except Exception as e:
            if str(e) == "No handler":
                continue

            print(("\n" + "=" * 32) * 2)
            print(e)
            print(("=" * 32 + "\n") * 2)

        for _ in range(processed):
            Console.clear_line()
            Console.move_up(1)
        Console.log_success(f"Episode {episode_number} downloaded")
        exit()

    Console.clear_line()
    Console.move_up(processed)
    Console.log_error(f"Failed to download episode {episode_number}")
    exit(1)


if __name__ == '__main__':
    main()
