#!/usr/bin/env bash

trap "exit" INT

SUITES=$(cat "$PWD/phpunit.xml" | grep '<testsuite name="' | sed -n -e 's/^.*<testsuite name="\(.*\)\">/\1/p')
SUITES=($SUITES)
LOG_FOLDER="$PWD/var/logs/tests"
LOG_POINTER="$LOG_FOLDER/_/latest-test.log"

LOG_FILE_TEMPLATE="$LOG_FOLDER/%s.log"
RUN_CMD_TEMPLATE="docker/cli vendor/bin/phpunit --testsuite %s"

if [[ ! "$#" -eq "0" ]]; then
    SUITES=( "$@" )
fi

function display-time() {
    local T=$1
    local D=$(( T / 60 / 60 / 24 ))
    local H=$(( T / 60 / 60 % 24 ))
    local M=$(( T / 60 % 60 ))
    local S=$(( T % 60 ))
    (( $D > 0 )) && printf '%d days ' "$D"
    (( $H > 0 )) && printf '%d hours ' "$H"
    (( $M > 0 )) && printf '%d minutes ' "$M"
    (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
    printf '%d seconds\n' "$S"
}

function message_info() {
    if [[ -z $2 ]]; then
        tput setab 0
        tput setaf 7
    fi

    if [[ $2 -eq 2 ]]; then
        tput smul
    fi

    tput sitm
    printf "$1"
    tput rmul
    tput sgr0
}

function message_bold() {
    tput bold
    tput smul
    message_info "$1" 1
    tput smso
    tput rmso
}

function message_error() {
    tput setab 0
    tput setaf 1
    message_bold "$1"
}

function message_success() {
    tput setab 0
    tput setaf 2
    message_bold "$1"
}

function _zero_pad_number() {
    log_10=$(echo "l(10)" | bc -l)
    log_n=$(echo "l($1)" | bc -l)

    echo "($log_10 + $log_n) / $log_10" | bc
}

mkdir -p "$LOG_FOLDER"
mkdir -p $(dirname "$LOG_POINTER")

MAX_SUITE_LEN=-1
for str in "${SUITES[@]}"; do
    if [[ ${#str} -gt ${MAX_SUITE_LEN} ]]; then
        MAX_SUITE_LEN=${#str}
    fi
done

ARRAY_LENGTH="${#SUITES[@]}"
ZERO_PAD_LENGTH=$(_zero_pad_number ${ARRAY_LENGTH})

START_TIME=`date +%s`
message_bold "Running test suites\n"
message_info "Output folder: $LOG_FOLDER\n"
message_info "Current suite output: $LOG_POINTER\n"
tests_done=0
tests_failed=0
for i in "${!SUITES[@]}"; do
    SUITE="${SUITES[$i]}"
    LOG_FILE=$(printf "$LOG_FILE_TEMPLATE" "${SUITE}")
    RUN_CMD=$(printf "$RUN_CMD_TEMPLATE" "${SUITE}")

    [[ -f "$LOG_POINTER" ]] && rm "$LOG_POINTER"
    ln -rs "$LOG_FILE" "$LOG_POINTER"

    if [[ -f "$LOG_FILE" ]]; then
        mv "$LOG_FILE" "$LOG_FILE.old"
    fi

    SUITE_PAD_OFFSET=$(( $MAX_SUITE_LEN - ${#SUITE} + 1 ))
    printf "(%${ZERO_PAD_LENGTH}d/%d) Test suite '%s' %${SUITE_PAD_OFFSET}s" $(($i + 1)) "$ARRAY_LENGTH" "$SUITE" " "
    tput sc
    message_info "RUNNING"

    __OLD_TIMEFORMAT=$TIMEFORMAT
    export TIMEFORMAT='%3lR'
    res=`(time ${RUN_CMD} > "$LOG_FILE") 2>&1`
    res_exit_code=$?
    test_duration=$(echo "$res" | tail -n1)
    export TIMEFORMAT=${__OLD_TIMEFORMAT}
    unset __OLD_TIMEFORMAT

    tput rc
    tput el

    if [[ "$res_exit_code" -eq '0' ]]; then
        test_status='Done'
        ((tests_done++))
        message_success $test_status
    else
        test_status='Fail'
        ((tests_failed++))
        message_error $test_status
    fi

    message_info " ($test_duration)\n"

    notify-send "Finished testing '$SUITE' after $test_duration ($test_status)"
done
END_TIME=`date +%s`

TOTAL_TIME=`display-time $(( $END_TIME - $START_TIME ))`

printf "Finished in "
message_bold "$TOTAL_TIME\n"

notify-send "Done with all suites in $TOTAL_TIME (S: $tests_done | F: $tests_failed)"
