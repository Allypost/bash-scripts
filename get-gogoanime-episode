#!/usr/bin/env python3

import argparse
import re
from typing import Union
from bs4 import BeautifulSoup, Tag
import requests

from python.helpers.main import (
    DownloadSite,
    DownloadSitesCtx,
    EpisodeNumberNotFoundException,
    downloader_main,
)
from python.log.console import Console

BASE_URL = "https://gogoanime3.co"

ALLOWED_SERIES_TYPES = {
    "sub",
    "dub",
    "raw",
    "unknown",
}

UNWANTED_CDN_HOSTNAMES = {
    ".netmagcdn.com",
}


def get_gogoanime_page_url(anime_name: str) -> str:
    return f"{BASE_URL}/category/{anime_name}"


def get_anime_id(anime_name: str) -> Union[str, None]:
    Console.log_dim("Fetching episode page...", return_line=True)
    response = requests.get(
        get_gogoanime_page_url(anime_name),
    )

    if not response.status_code or response.status_code == 404:
        Console.log_dim("Anime not found")
        return None

    page_html = response.text

    Console.log_dim("Parsing HTML...", return_line=True)
    page = BeautifulSoup(
        page_html,
        "html.parser",
    )

    movie_id_el = page.find(id="movie_id")
    if not isinstance(movie_id_el, Tag):
        Console.log_dim("No movie id found")
        return None

    return movie_id_el.attrs["value"]


def get_anime_episode_list(anime_id: str) -> dict[float, str]:
    Console.log_dim("Fetching episode list...", return_line=True)
    response = requests.get(
        f"https://ajax.gogocdn.net/ajax/load-list-episode?ep_start=0&ep_end=99999999&id={anime_id}"
    )

    if not response.status_code:
        Console.log_dim("No episodes found")
        return {}

    page_html = response.text

    Console.log_dim("Parsing HTML...", return_line=True)
    elements = BeautifulSoup(
        page_html,
        "html.parser",
    ).find_all(
        "a",
    )

    ret = {}
    for ep in elements:
        ep_str = ep.find(class_="name").text.split(" ")[1]
        ep_number = float(ep_str)
        ep_url = ep.attrs["href"].strip()

        ret[ep_number] = ep_url

    return ret


def get_anime_episode_download_server_list(
    episode_url: str,
) -> list[DownloadSite] | None:
    response = requests.get(f"{BASE_URL}{episode_url}")

    if not response.status_code:
        Console.log_dim("No episodes found")
        return None

    page_html = response.text

    page_el = BeautifulSoup(
        page_html,
        "html.parser",
    )

    elements = page_el.find(
        class_="anime_muti_link",
    )

    if not isinstance(elements, Tag):
        Console.log_dim("No download servers found")
        return None

    elements = elements.find_all("a")

    def fix_url(url: Union[str, None]) -> Union[str, None]:
        if not url:
            return None

        if re.compile(r"^https?://").match(url):
            return url

        if str(url).startswith("//"):
            return f"https:{url}"

        Console.log(f"Unknown url format: `{url}'")

        return None

    ret: list[DownloadSite] = []
    for element in elements:
        site_name = next(element.stripped_strings)
        site_url = fix_url(element.attrs["data-video"])

        if not site_url:
            continue

        ret.append(DownloadSite(name=site_name, url=site_url, type="unknown"))

    return ret


def main():
    def with_additional_args(parser: argparse.ArgumentParser):
        parser.add_argument(
            "-o, --offset",
            help="Set episode name offset (eg. -o 3 will name the first episode 4). Useful for when a season is split into multiple parts.",
            type=int,
            nargs="?",
            required=False,
            default=0,
            dest="offset",
        )

    def get_download_sites(ctx: DownloadSitesCtx):
        anime_id = get_anime_id(ctx.series_name)
        if anime_id is None:
            Console.log_error(f"Can't fetch page for `{ctx.series_name}'")
            exit(1)

        episodes = get_anime_episode_list(anime_id)
        if ctx.episode_number not in episodes:
            raise EpisodeNumberNotFoundException()

        return get_anime_episode_download_server_list(
            episodes[ctx.episode_number],
        )

    downloader_main(
        site_name="gogoanime.to",
        with_additional_args=with_additional_args,
        allowed_series_types=ALLOWED_SERIES_TYPES,
        episode_page_url_fn=get_gogoanime_page_url,
        download_sites_fn=get_download_sites,
        unwanted_cdn_hostnames=UNWANTED_CDN_HOSTNAMES,
    )


if __name__ == "__main__":
    main()
